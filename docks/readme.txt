NVGT Pack Tools:
Just another frontend to the relatively simple pack_file object that can be used for creation and extraction of game data. Also inspired by the Masonian toolset.
This frontend adds some features that distinguish it from other freely available frontends, such as the ability to easily work with directory trees of multiple levels during creation and extraction, on-the-fly encryption of varying complexities, and to be useful to those who may have the knowhow to simply dump keys from the executables themselves.
Most of it you don't have to do any extra work, however here are some tips to get you the most use out of this toolset.
The directory tree practice that is the most common is to separate the paths with a slash, and to not prepend the root folder. So the creator and extracter honor this general convension. This means that if you create your game data using this toolset, you would reference a file in root\folder1\file1.txt as folder1/file1.txt within the pack_file calls. This also means that you can extract trees built by this toolset or other custom-made toolsets for directories, such as that in use in crazy party.
Within the extracter, an extra input field was added asking if you wish to append anything to the filenames, this was the case with some oriol games where the sounds did not have the .ogg extension. That is about all it is useful for.
Also within the extracter, since file decrypt and string decrypt have a specified indicator if decryption with the specified key failed, the extractor can detect decryption failures and let you know. It counts them up, so if only certain files failed to decrypt it will dump the pack's file list to a text file asking you to examine for alternate file types. This could be the case where other data files are embedded in the pack file and are either not encrypted or encrypted with a different key. If a "pack wide decryption failure" has occured, meaning every single file failed to decrypt using the specified key, it will let you know of this as well. It will however leave the pack's directory intact if you wish to examine the results.
The encryption key fields for both creator and extracter take some special strings you can use to control the crypto process, allowing you to have more fine-grained control over exactly what is being sent as the key. This functionality was built into the extracter for dumping purposes, but has since been added to the creator for consistency and possibly increased security. I will go into detail on these now.
If you enter file::data, with data being a filename and extension, it would cause the tool to read the key from an ansi encoded text file. NVGT is not unicode aware so don't do UTF-8 conversions on special characters.
The next two convensions can be used either within the encryption key field or within a keyfile.
hex::data: causes the following data to be interpreted as a hex string where two hexidecimal digits make up each byte. If someone is to abuse the data in a game's decryption key to actually use one of these special colon colon keys, you can use the key converted to ansi hex representation with 3A as a colon for a workaround.
str::data: will interpret the key as it follows, except it will switch the crypto mode from file based encryption to string based encryption. String based encryption is useful in situations where certain games do not use the set_sound_decryption_key function at all, and instead have some higher level function that will read a sound from the pack file and string_decrypt the data before passing it to a sound system. This is the case with games that encrypt their sounds and use a sound engine other than NVGT's default one.
If you wish to specify a hex key in string crypto mode, you would have to go str::hex::data. Going hex::str::data would cause the str:: check to not work as the data would have already been converted to hex. File::data is always interpreted first, such as file::gamekey.txt
I hope you get use out of this pack toolset, not just for dumping game's sounds but also for creating your own data with the most flexibility!
This particular package is brought to you by x0.
