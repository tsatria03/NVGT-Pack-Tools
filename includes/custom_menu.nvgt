int menumusvolume=0;
void fade(sound@ handle, double final_volume = -50, double delay = 25)
{
if (handle.volume == final_volume or !handle.active)
return;
while(round(handle.volume, 0) != round(final_volume, 0) and handle.playing) {
if (handle.volume > final_volume)
handle.volume = handle.volume - 1;
else if (handle.volume < final_volume)
handle.volume = handle.volume + 1;
else
break;
wait (delay);
}
}

class custom_menu_item
{
    string name;
    string id;
    custom_menu_item(string item_name, string item_id = "")
    {
        name = item_name;
        id = item_id;
    }
}

class custom_menu
{
    custom_menu_item@[] items;
bool music_added = false;
    int current_item = 0;
int last_letter_index = -1;
int voltime = 50;
int volkeyup = KEY_PRIOR;
int volkeydown = KEY_NEXT;
string intro_text = "";
string last_letter_pressed = "";
sound music;
timer voltimer;
    bool enable_up_and_down = true;
    bool enable_left_and_right = true;
    bool enable_home_and_end = true;
    bool enable_wrapping = true;
bool enable_first_letter_navigation = true;
    bool speak_position = true;
    string click_sound;
    string close_sound;
    string enter_sound;
    string edge_sound;
    string open_sound;
    string wrap_sound;
string last_search_query = "";
void set_volume_keys(int key1, int key2)
{
volkeyup = key1;
volkeydown = key2;
}
void fade_music(int value1=20)
{
fade(music, -50, value1);
music.stop();
}
void stop_music()
{
music.stop();
}
void add_music(string musicpath)
{
if (music.playing == false)
{
if (music.load(musicpath))
{
    music.set_volume(menumusvolume);
    music_added = true;
}
else
{
return;
}
}
}
void play_music()
{
music.set_volume(menumusvolume);
if (music.playing == false)
music.play_looped();
}
    void play_click_sound()
    {
        if (click_sound != "") spool.play_stationary(click_sound, false);
else
beep_percentage(50);
    }
    void play_close_sound()
    {
        if (close_sound != "") spool.play_stationary(close_sound, false);
else
beep_percentage(50);
    }
    void play_enter_sound()
    {
        if (enter_sound != "") spool.play_stationary(enter_sound, false);
else
beep_percentage(50);
    }
    void play_edge_sound()
    {
        if (edge_sound != "") spool.play_stationary(edge_sound, false);
else
beep_percentage(50);
    }
    void play_open_sound()
    {
        if (open_sound != "") spool.play_stationary(open_sound, false);
else
beep_percentage(50);
    }
    void play_wrap_sound()
    {
        if (wrap_sound != "") spool.play_stationary(wrap_sound, false);
else
beep_percentage(50);
    }
    void clear_all_items()
    {
        items.resize(0);
    }
void reset(bool completely=false)
{
    if(completely==true) stop_music();
    clear_all_items();
    current_item = 0;
    last_letter_index = -1;
    last_letter_pressed = "";
    last_search_query = "";
}
void find_first_letter_item(bool &inout has_focus)
{
    string chars = get_characters();
    if (chars == "") return;
    string letter = chars.substr(0, 1).lower();
    int start_index;
    if (letter == last_letter_pressed)
        start_index = (current_item + 1) % items.length();
    else {
        start_index = 0;
        last_letter_pressed = letter;
    }
        if (has_focus && items[current_item].name.lower().starts_with(letter))
            {
start_index = (current_item + 1) % items.length();
        }
else
            {
start_index = 0;
    }
int index = start_index;
    bool found = false;
    do {
        if (items[index].name.lower().starts_with(letter)) {
            current_item = index;
            speak(items[current_item].name);
            play_click_sound();
            has_focus = true;
            found = true;
            break;
        }
        index = (index + 1) % items.length();
    } while (index != start_index);
    if (!found)
return;
}
void find_searched_item()
{
    string query = input_box("Find an item", "Enter a keyword to search for:", last_search_query);
    if (query == "" || get_last_error() == -12)
    {
        speak("Cancelled.");
        return;
    }
    last_search_query = query;
    string lower_query = query.lower();
    int found_index = -1;
    int start_index = current_item + 1;
    for (int i = start_index; i < int(items.length()); i++)
    {
        if (items[i].name.lower().find(lower_query) != -1)
        {
            found_index = i;
            break;
        }
    }
    if (found_index == -1)
    {
        for (int i = 0; i <= current_item; i++)
        {
            if (items[i].name.lower().find(lower_query) != -1)
            {
                found_index = i;
                break;
            }
        }
    }
    if (found_index == -1)
    {
        speak("No matching item found for " + query);
    }
    else
    {
        current_item = found_index;
        speak("Item " + string(current_item + 1) + ": " + items[current_item].name);
        play_click_sound();
    }
}
    int add_item(string name, string id = "")
    {
        items.insert_last(custom_menu_item(name, id));
        return items.length();
    }
int find_item_by_id(string id)
{
    for (int i = 0; i < int(items.length()); i++)
        if (items[i].id == id)
            return i;
    return -1;
}
    string get_item_name(int index)
    {
        if (index <= 0 || index > int(items.length())) return "";
        return items[index - 1].name;
    }
    string get_item_id(int index)
    {
        if (index <= 0 || index > int(items.length())) return "";
        return items[index - 1].id;
    }
    string get_item_description(int index)
    {
        string desc = items[index].name;
        if (speak_position)
            desc += ". " + string(index + 1) + " of " + string(items.length());
        return desc;
    }
    int run(int start_position = 0, bool start_focused = false)
    {
        if (items.length() == 0)
        {
            speak("There are no menu items available to view.");
            return -1;
        }
        if (start_position >= 0 && start_position < int(items.length()))
            current_item = start_position;
        else
            current_item = 0;
        if (!start_focused && intro_text != "") speak(intro_text);
        play_open_sound();
        bool has_focus = start_focused;
        if (has_focus && start_position >= 0 && start_position < int(items.length()))
if (has_focus)
    speak(intro_text+" "+get_item_description(current_item));
else if (intro_text != "")
    speak(intro_text);
music.set_volume(menumusvolume);
music.play_looped();
        while (true)
        {
            wait(5);
if (enable_first_letter_navigation)
{
find_first_letter_item(has_focus);
}
if(key_pressed(KEY_F3))
{
find_searched_item();
}
if (key_down(volkeydown) and voltimer.elapsed >= voltime and menumusvolume > -50)
{
menumusvolume -= 2;
music.set_volume(menumusvolume);
//writepreffs();
voltimer.restart();
}
if (key_down(volkeyup) and voltimer.elapsed >= voltime and menumusvolume < 0)
{
menumusvolume += 2;
music.set_volume(menumusvolume);
//writepreffs();
voltimer.restart();
}
            if (key_repeating(KEY_TAB))
            {
beep_percentage(50);
                if (intro_text != "") speak(intro_text);
            }
else if ((key_repeating(KEY_DOWN)) && enable_up_and_down)
{
    if (!has_focus)
    {
        has_focus = true;
        play_click_sound();
        speak(get_item_description(current_item));
        continue;
    }
    int prev = current_item;
    if (enable_wrapping)
    {
        current_item = (current_item + 1) % items.length();
        if (current_item == 0 && prev == int(items.length()) - 1)
            play_wrap_sound();
        else
            play_click_sound();
    }
    else if (current_item < int(items.length()) - 1)
    {
        current_item++;
        play_click_sound();
    }
    else
        play_edge_sound();
    speak(get_item_description(current_item));
}
else if ((key_repeating(KEY_UP)) && enable_up_and_down)
{
    if (!has_focus)
    {
        has_focus = true;
        if (enable_wrapping)
        {
            current_item = items.length() - 1;
            play_click_sound();
            speak(get_item_description(current_item));
            continue;
        }
    }
    int prev = current_item;
    if (enable_wrapping)
    {
        current_item = (current_item - 1 + items.length()) % items.length();
        if (current_item == int(items.length()) - 1 && prev == 0)
            play_wrap_sound();
        else
            play_click_sound();
    }
    else if (current_item > 0)
    {
        current_item--;
        play_click_sound();
    }
    else
    {
        play_edge_sound();
    }
    speak(get_item_description(current_item));
}
else if ((key_repeating(KEY_RIGHT)) && enable_left_and_right)
{
    if (!has_focus)
    {
        has_focus = true;
        play_click_sound();
        speak(get_item_description(current_item));
        continue;
    }
    int prev = current_item;
    if (enable_wrapping)
    {
        current_item = (current_item + 1) % items.length();
        if (current_item == 0 && prev == int(items.length()) - 1)
            play_wrap_sound();
        else
            play_click_sound();
    }
    else if (current_item < int(items.length()) - 1)
    {
        current_item++;
        play_click_sound();
    }
    else
        play_edge_sound();
    speak(get_item_description(current_item));
}
else if ((key_repeating(KEY_LEFT)) && enable_left_and_right)
{
    if (!has_focus)
    {
        has_focus = true;
        if (enable_wrapping)
        {
            current_item = items.length() - 1;
            play_click_sound();
            speak(get_item_description(current_item));
            continue;
        }
    }
    int prev = current_item;
    if (enable_wrapping)
    {
        current_item = (current_item - 1 + items.length()) % items.length();
        if (current_item == int(items.length()) - 1 && prev == 0)
            play_wrap_sound();
        else
            play_click_sound();
    }
    else if (current_item > 0)
    {
        current_item--;
        play_click_sound();
    }
    else
    {
        play_edge_sound();
    }
    speak(get_item_description(current_item));
}
            else if (key_repeating(KEY_HOME) && enable_home_and_end)
            {
                if (!has_focus)
                {
                    has_focus = true;
                    play_click_sound();
                    speak(get_item_description(current_item));
                    continue;
                }
                if (current_item != 0)
                {
                    current_item = 0;
                }
                    play_click_sound();
                    speak(get_item_description(current_item));
}
else if (key_repeating(KEY_END) && enable_home_and_end)
{
    if (!has_focus)
    {
        has_focus = true;
    }
    if (current_item != int(items.length()) - 1)
    {
        current_item = items.length() - 1;
    }
        play_click_sound();
    speak(get_item_description(current_item));
}
                    else if (key_repeating(KEY_ESCAPE))
            {
                play_close_sound();
                return -1;
            }
            else if (key_repeating(KEY_RETURN))
            {
                if (!has_focus) continue;
                play_enter_sound();
                return current_item +1;
            }
        }
        return -1;
    }
}
